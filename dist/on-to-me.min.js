export function getPreviousSib(t,e){let s=t;for(;s&&(s.hasAttribute("on")||null!==e&&!s.matches(e));)s=s.previousElementSibling||t.parentElement;return s}export function nudge(t){const e=t.getAttribute("disabled");null!==e&&(0===e.length||"1"===e?t.removeAttribute("disabled"):t.setAttribute("disabled",(parseInt(e)-1).toString()))}export function getProp(t,e,s){let n=t,r=!0;return e.forEach((t=>{if(n&&""!==t){if(r&&"target"===t&&null===n.target)n=s._trigger;else switch(typeof t){case"string":n=n[t];break;default:n=n[t[0]].apply(n,t[1])}r=!1}})),n}export function convert(t,e){if(null===e)return t;let s=t;switch(this.parseValAs){case"bool":s="true"===t;break;case"int":s=parseInt(t);break;case"float":s=parseFloat(t);break;case"date":s=new Date(t);break;case"truthy":s=!!t;break;case"falsy":s=!t}return s}const ltcRe=/(\-\w)/g;export function lispToCamel(t){return t.replace(ltcRe,(function(t){return t[1].toUpperCase()}))}export function findMatches(t,e,s,n,r){let l=[];const a=s??1/0;let o=0;for(t=n?t.closest(n):t.nextElementSibling;null!==t;){if(t.matches(e)){if(r){const e=Array.from(t.querySelectorAll(r));l=l.concat(e),o+=e.length}else o++,l.push(t);if(o>a)break}t=t.nextElementSibling}return l}export function getToProp(t,e,s){let n=e||t;const r=n.lastIndexOf("[");return-1===r?null:(n=n.replace("[data-","[-"),n=n.substring(r+2,n.length-1),s?n:lispToCamel(n))}export function passVal(t,e,s,n,r,l,a,o,i){const c=i??findMatches(e,s,r,l,n),u=a||getToProp(s,n,o);return c.forEach((e=>{o?e.setAttribute(u,t):e[u]=t})),c}export class OnToMe extends HTMLElement{connectedCallback(){this.style.display="none";const t=this._g=this.getAttribute.bind(this),e=getPreviousSib(this,t("observe"));nudge(e),e.addEventListener(t("on"),(t=>{t.stopPropagation(),this.getVal(t)}));const s=t("mutate-event");null!==s&&this.parentElement?.addEventListener(s,(t=>{this.putVal()}));const n=t("init-val");if(null!==n){let s=getProp(e,n.split("."),this);s=convert(s,t("parse-val-as")),this._lastVal=s;const r=t("me"),l=null===r?1/0:parseInt(r);passVal(s,this,t("to"),t("care-of"),l,t("from"),t("prop"))}}getVal(t){let e=getProp(t,this._g("val")?.split("."),this);void 0!==e&&(e=convert(e,this._g("parse-val-as")),this._lastVal=e,this.putVal())}putVal(){if(void 0===this._lastVal)return;const t=this._g;this._g("to"),this._g("care-of");passVal(this._lastVal,this,t("to"),t("care-of"),t("me"),t("from"),t("prop"))}}const otm="on-to-me";customElements.get(otm)||customElements.define(otm,OnToMe);
